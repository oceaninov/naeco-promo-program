syntax = "proto3";
import "google/protobuf/empty.proto";
package api.v1;
option go_package = "github.com/oceaninov/naeco-promo-program/protocs/api/v1/api/v1";

message AddProgramReq {
  string id = 1;
  string channel_id = 2;
  string topic_id = 3;
  string description = 4;
  string memo_url = 5;
  int64 start_at = 6;
  int64 end_at = 7;
  int64 allocated_amount = 8;
  int64 available_allocated_amount = 9;
  string eligibility_check = 10;
  int64 status = 11;
  int64 created_at = 12;
  string created_by = 13;
  int64 updated_at = 14;
  string updated_by = 15;
  string source_of_fund = 16;
  string discount_calculation = 17;
  int64 allocated_quota = 18;
  int64 available_allocated_quota = 19;
  int64 discount_percent = 20;
  int64 discount_amount = 21;
  string merchant_csv_url = 22;
  string customer_csv_url = 23;
  int64 refresh_program_quota_daily = 24;
  int64 on_boarding_date_start = 25;
  int64 on_boarding_date_to = 26;
  int64 range_trx_amount_minimum = 27;
  int64 range_trx_amount_maximum = 28;
  bool deprecated = 29;
  string history_group_id = 30;
  repeated ProgramChannel program_channels = 31;
}

message ProgramRes {
  bool success = 1;
  string messages = 2;
  string new_program_id = 3;
}

message EditProgramReq {
  string id = 1;
  string channel_id = 2;
  string topic_id = 3;
  string description = 4;
  string memo_url = 5;
  int64 start_at = 6;
  int64 end_at = 7;
  int64 allocated_amount = 8;
  int64 available_allocated_amount = 9;
  string eligibility_check = 10;
  int64 status = 11;
  int64 updated_at = 12;
  string updated_by = 13;
  string source_of_fund = 14;
  string discount_calculation = 15;
  int64 allocated_quota = 16;
  int64 available_allocated_quota = 17;
  int64 discount_percent = 18;
  int64 discount_amount = 19;
  string merchant_csv_url = 20;
  string customer_csv_url = 21;
  int64 refresh_program_quota_daily = 22;
  int64 on_boarding_date_start = 23;
  int64 on_boarding_date_to = 24;
  int64 range_trx_amount_minimum = 25;
  int64 range_trx_amount_maximum = 26;
  bool deprecated = 27;
  string history_group_id = 28;
  repeated ProgramChannel program_channels = 29;
}

message DeleteProgramReq {
  string id = 1;
}

message GetProgramReq {
  string topic_id = 1;
}

message GetProgramDetailReq {
  string id = 1;
}

message Program {
  string id = 1;
  string channel_id = 2;
  string topic_id = 3;
  string description = 4;
  string memo_url = 5;
  int64 start_at = 6;
  int64 end_at = 7;
  int64 allocated_amount = 8;
  int64 available_allocated_amount = 9;
  string eligibility_check = 10;
  int64 status = 11;
  int64 created_at = 12;
  string created_by = 13;
  int64 updated_at = 14;
  string updated_by = 15;
  string source_of_fund = 16;
  string discount_calculation = 17;
  int64 allocated_quota = 18;
  int64 available_allocated_quota = 19;
  int64 discount_percent = 20;
  int64 discount_amount = 21;
  string merchant_csv_url = 22;
  string customer_csv_url = 23;
  string topic_title = 24;
  int64 refresh_program_quota_daily = 25;
  int64 on_boarding_date_start = 26;
  int64 on_boarding_date_to = 27;
  int64 range_trx_amount_minimum = 28;
  int64 range_trx_amount_maximum = 29;
  bool deprecated = 30;
  string history_group_id = 31;
  repeated ProgramChannel program_channels = 32;
}

message ProgramChannel {
  string id = 1;
  string key = 2;
  string status = 3;
  string title = 4;
  int64 created_at = 5;
  string created_by = 6;
  int64 updated_at = 7;
  string updated_by = 8;
  string program_channel_id = 9;
}

message Programs {
  repeated Program programs = 1;
}

message ProgramStatus {
  string id = 1;
  int32 status = 2;
}

message Response {
  bool success = 1;
  string messages = 2;
}

message BlacklistId {
  string id = 1;
}

message Blacklisting {
  string program_id = 1;
  repeated BlacklistId blacklists_id = 2;
}

message GetBlacklistReq {
  string program_id = 1;
}

message Blacklist {
  string program_id = 1;
  string blacklist_program_id = 2;
  Program program = 3;
}

message Blacklists {
  repeated Blacklist blacklists = 1;
}

service ProgramService {
  rpc AddProgram(AddProgramReq) returns (ProgramRes);
  rpc EditProgram(EditProgramReq) returns (ProgramRes);
  rpc DeleteProgram(DeleteProgramReq) returns (ProgramRes);
  rpc GetProgramByTopicID(GetProgramReq) returns (Programs);
  rpc GetProgramDetail(GetProgramDetailReq) returns (Program);
  rpc ProgramChangeStatus(ProgramStatus) returns (google.protobuf.Empty);
  rpc GetProgram(google.protobuf.Empty) returns (Programs);
  rpc ChangeStatusProgram(ProgramStatus) returns (Response);
  rpc AddProgramBlacklistsBulk(Blacklisting) returns (google.protobuf.Empty);
  rpc DeleteProgramBlacklistsBulk(Blacklisting) returns (google.protobuf.Empty);
  rpc GetProgramBlacklists(GetBlacklistReq) returns (Blacklists);
}